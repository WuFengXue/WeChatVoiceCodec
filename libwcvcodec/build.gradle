apply plugin: 'com.android.library'

ext {
    // 项目包名
    PUBLISH_GROUP_ID = "io.github.WuFengXue"
    // 项目名
    PUBLISH_ARTIFACT_ID = 'WeChatVoiceCodec'
    // 版本号
    PUBLISH_VERSION = '1.0.3'
}
apply from: "${rootProject.projectDir}/publish-mavencentral.gradle"

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 3
        versionName "1.0.3"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions -pthread"
                // 要支持 'armeabi-v7a' 需开启 NO_ASM 宏
                // lame 编解码库的 lame_main.c 在方法 lame_main 中声明的
                // 局部变量占用内存较大，会导致申请的内存超过子线程栈的内存上限从而
                // 导致 SIGSEGV 错误，所以需要减小 MAX_NOGAP 的大小，具体见：
                // [issue2](https://github.com/WuFengXue/WeChatVoiceCodec/issues/2)
                cFlags "-DSTDC_HEADERS -DHAVE_LIMITS_H -DHAVE_MPGLIB -DNO_ASM -DMAX_NOGAP=50"
            }
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

allprojects {
    tasks.withType(Javadoc) {
        options {
            // 兼容中文字符
            encoding "UTF-8"
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/7/docs/api"
            // @date 注解为自定义注解
            tags "date:a:"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
